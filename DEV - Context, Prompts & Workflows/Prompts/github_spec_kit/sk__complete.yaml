# ─────────────────────────────────────────────────────────────────
# FRAMEWORK
# ─────────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit with manual gates
purpose: Spec-driven development with mandatory compliance and approvals
action: Run full SpecKit from spec to implementation with validation and user approvals at key checkpoints

operating_mode:
  workflow: sequential
  workflow_compliance: MANDATORY
  workflow_execution: manual_with_approvals
  approvals: after_each_step
  tracking: progressive_task_checklists
  validation: checkpoint_verification

# ─────────────────────────────────────────────────────────────────
# USER INPUTS
# ─────────────────────────────────────────────────────────────────
user_inputs:
  branch_strategy: "[BRANCH_STRATEGY]"
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ─────────────────────────────────────────────────────────────────
# FIELD HANDLING
# ─────────────────────────────────────────────────────────────────
field_handling:
  branch_strategy:
    required: true
    type: enum
    options:
      - main_temp: "Temporary worktree with short-lived branch (default). Work is isolated in .worktrees/{spec-id} on temp/{spec-id} branch, then merged back to main immediately after validation. Use for: 80% of work - normal features, bug fixes, improvements."
      - feature_branch: "Long-running feature branch in worktree for PR review. Work stays in .worktrees/{spec-id} on feature-{spec-id} branch for team review before integration. Use for: 20% of work - complex features requiring multi-day development and code review."
    default: main_temp
    note: "This decision controls workspace isolation strategy and final integration gates. main_branch option removed (use main_temp for quick integration)."

  spec_id:
    derive_from: "spec_folder path using pattern specs/{NNN} or specs/{NNN-name}"
    fallback: "Extract numeric portion or use timestamp if extraction fails"
    note: "Used to generate feature_branch_name"

  feature_branch_name:
    pattern: "feature-{spec_id}"
    condition: "Only used when branch_strategy == feature_branch"

  defaults:
    branch_strategy_empty: "Default to main_temp (recommended for 80% of work)"
    git_branch_empty: "Derived from worktree setup: temp/{spec-id} for main_temp, feature-{spec-id} for feature_branch"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

  note_on_branch_creation: "Worktree and branch creation handled by git-worktrees skill (see worktree_setup section below)"

# ─────────────────────────────────────────────────────────────────
# WORKTREE SETUP
# ─────────────────────────────────────────────────────────────────
worktree_setup:
  trigger: after_step_1_input_gathering
  invoke: git_worktrees_skill
  description: |
    Create isolated worktree for development using git-worktrees skill.
    Worktree location: .worktrees/{spec-id}
    Branch depends on strategy:
      - main_temp: temp/{spec-id} (short-lived, merges back immediately)
      - feature_branch: feature-{spec-id} (long-running, preserved for PR)

  strategy: branch_strategy  # Derived from user input in step 1

  inputs:
    task_description: derived_from_request_field
    branch_strategy: branch_strategy
    spec_folder: spec_folder  # Used to derive worktree name
    worktree_directory: auto_detect  # Priority: existing → AGENTS.md → ask user

  outputs:
    worktree_path: absolute_path_to_worktree  # e.g., /project/.worktrees/001
    git_branch: active_branch_name  # e.g., temp/001 or feature-001
    baseline_tests: pass_fail_status  # Tests passed at worktree creation

  validation: worktree_ready_and_verified

  note: |
    All subsequent workflow steps execute within this worktree context.
    Dependencies auto-installed (npm/cargo/pip/go).
    Environment verified clean before proceeding.

# ─────────────────────────────────────────────────────────────────
# WORKFLOW
# ─────────────────────────────────────────────────────────────────
workflow:
  step_1_request_analysis:
    input_source: USER_INPUTS_SECTION_ABOVE
    branch_strategy_prompt:
      required: true
      question: |
        Select development isolation strategy:

        Option A: main_temp (⭐ RECOMMENDED - default)
          - Temporary worktree with short-lived branch
          - Work isolated in .worktrees/{NNN} on temp/{NNN} branch
          - Tested in isolation, then merged back to main immediately
          - Branch and worktree deleted after successful integration
          - Use for: 80% of work - normal features, bug fixes, improvements

        Option B: feature_branch
          - Long-running feature branch in worktree for PR review
          - Work isolated in .worktrees/{NNN} on feature-{NNN} branch
          - Branch preserved for team review before integration
          - Worktree remains active for continued development
          - Use for: 20% of work - complex features requiring multi-day development

        This decision is required before proceeding and controls workspace isolation and final integration gates.

        Note: main_branch option removed. Use main_temp for quick integration with isolation benefits.
      options:
        - value: main_temp
          label: "Temporary worktree (main_temp) - Recommended"
        - value: feature_branch
          label: "Feature branch for PR (feature_branch)"
      default: main_temp
    branch_strategy: "[BRANCH_STRATEGY] → REQUIRED; cannot proceed without choice"
    git_branch: "[GIT_BRANCH] → derived from branch_strategy"
    spec_folder: "[SPEC_FOLDER] → auto-create if empty"
    context: "[CONTEXT] → infer if empty"
    issues: "[ISSUES] → discover if empty"
    request: "[REQUEST] → REQUIRED"
    environment: "[STAGING LINK] → skip DevTools if empty"
    scope: "[FILES] → default scope if empty"
    action: |
      1. Prompt user for branch_strategy (default: main_temp)
      2. Analyze user inputs and confirm understanding
      3. Prepare for worktree setup (next step will create isolated workspace)
    outputs:
      - branch_strategy_chosen
      - git_branch_resolved
      - requirement_summary
      - approach_overview
      - complexity_assessment
    validation: understanding_confirmed_and_branch_strategy_set
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements analyzed. Branch strategy: {branch_strategy}. Workspace will be created at .worktrees/{spec-id}. Proceed to workspace setup?"
      confirmation_needed: true

  step_1_5_workspace_setup:
    action: Create isolated worktree via git-worktrees skill
    reference: worktree_setup section above defines complete setup process
    validation: worktree_ready_and_verified
    outputs:
      - worktree_path_resolved
      - git_branch_active
      - baseline_tests_status
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Workspace created at {worktree_path} on branch {git_branch}. Baseline tests: {baseline_tests}. Proceed to pre-work review?"
      confirmation_needed: true

  step_2_pre_work_review:
    required_documents:
      - AGENTS.md
      - .specify/memory/constitution.md
      - knowledge/*.md
    verification: MUST REVIEW
    validation: principles_established
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Pre-work documentation reviewed. Proceed to specification?"
      confirmation_needed: true
  
  step_3_specification:
    command: /specify [feature-description]
    outputs:
      - feature_branch: created
      - spec.md: acceptance_criteria
      - location: specs/[NNN-feature]/spec.md
    validation: spec_complete
    chrome_devtools:
      when: analyzing_existing_features
      approach: Navigate → Snapshot → Analyze → Document
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Specification created. Review spec.md and approve to proceed to clarification?"
      confirmation_needed: true
  
  step_4_clarification:
    command: /clarify
    outputs:
      - resolved_ambiguities
      - clarified_requirements
      - updated_spec
    validation: requirements_clear
    chrome_devtools:
      when: staging_url_provided
      approach: Navigate → Inspect → Analyze → Clarify
      capture: current_behavior_screenshots
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements clarified. Proceed to quality checklist?"
      confirmation_needed: true
  
  step_5_quality_checklist:
    command: /speckit.checklist
    outputs:
      - quality_checklist: generated
    validation: checklist_generated
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Quality checklist complete. Proceed to planning?"
      confirmation_needed: true
  
  step_6_planning:
    command: /plan [context]
    outputs:
      - plan.md: technical_approach
      - dependencies: identified
      - upstream_docs: reviewed
    validation: approach_defined
    chrome_devtools:
      when: analyzing_current_implementation
      actions:
        - inspect_network_requests
        - analyze_dom_structure
        - review_console_errors
        - capture_performance_metrics
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Technical plan created. Review plan.md and approve to proceed to task breakdown?"
      confirmation_needed: true
  
  step_7_task_breakdown:
    command: /tasks
    outputs:
      - tasks/checklist.md
      - task_duration: 15_to_60_minutes
      - tracking_structure: established
    validation: tasks_actionable
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Tasks broken down. Review checklist.md and approve to proceed to analysis?"
      confirmation_needed: true
  
  step_8_analysis:
    command: /analyze
    outputs:
      - consistency_report
      - coverage_verification
      - alignment_check
      - gap_analysis
    validation: consistency_verified
    chrome_devtools:
      when: comparing_staging_vs_spec
      approach: Navigate → Snapshot → Compare → Report
      focus:
        - ui_consistency
        - functionality_gaps
        - performance_baseline
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Analysis complete. Review consistency report and approve to proceed to implementation check?"
      confirmation_needed: true
  
  step_9_implementation_check:
    command: /implement [task-id]
    checks:
      prerequisites: verified
      blockers: none
      environment: ready
    critical_gate: CONFIRM_BEFORE_CODE
    chrome_devtools:
      when: validating_environment
      verify:
        - api_endpoints_accessible
        - authentication_working
        - dependencies_loaded
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Implementation prerequisites verified. APPROVE TO BEGIN CODE IMPLEMENTATION?"
      confirmation_needed: true
      warning: "This will begin actual code changes"
  
  step_10_development:
    approach: manual_implementation_with_checkpoints
    requirements:
      - follow: knowledge/code_standards.md
      - update: task_checklist_progressively
      - test: before_commit
    checkpoints:
      major_changes: 
        action: log_progress
        approval: USER_APPROVAL_REQUIRED
      issues_found: 
        action: document_resolution
        approval: USER_APPROVAL_REQUIRED
      architecture_change: 
        action: note_deviation
        approval: USER_APPROVAL_REQUIRED
    chrome_devtools:
      when: debugging_implementation
      actions:
        - test_in_browser
        - verify_network_calls
        - check_console_output
        - validate_dom_changes
        - measure_performance_impact
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Development complete. Approve to proceed to completion summary?"
      confirmation_needed: true

  step_11_completion:
    summary_document:
      location: specs/[NNN-feature]/implementation-summary.md
      required_sections:
        - feature_branch_name
        - files_modified_created
        - verification_steps_taken
        - deviations_from_plan
        - knowledge_base_updates
        - recommended_next_steps
        - browser_testing_results
    final_checklist:
      - update_task_status: completed
      - validation_passed: confirmed
      - summary_created: true
      - staging_verified: true
    final_approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Implementation summary complete. Approve to finalize workflow?"
      confirmation_needed: true

  step_12_integration_and_cleanup:
    name: Integration & Cleanup
    description: Integrate work and cleanup based on strategy

    # ─────────────────────────────────────────────────────────────
    # MAIN_TEMP STRATEGY (DEFAULT - 80% of work)
    # ─────────────────────────────────────────────────────────────
    condition_main_temp:
      when: branch_strategy == main_temp
      philosophy: "Temp branches are immediately merged and deleted. Worktree is ephemeral."

      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "All checks passed. Ready to integrate temp branch to main and cleanup? This will: (1) Merge temp/{spec-id} to main, (2) Delete temp branch, (3) Remove worktree .worktrees/{spec-id}."
        confirmation_needed: true

      integration_steps:
        - action: verify_worktree_clean
          command: "git status"
          validation: no_uncommitted_changes

        - action: return_to_main_repo
          command: "cd ../.."
          note: Leave worktree, return to main repository

        - action: checkout_main_and_update
          command: "git checkout main && git pull --ff-only"
          validation: main_up_to_date

        - action: merge_temp_branch
          command: "git merge --ff-only temp/{spec-id}"
          validation: fast_forward_successful
          on_failure: |
            If merge fails (not fast-forward):
            - Likely main has diverged
            - Offer to rebase: cd .worktrees/{spec-id} && git rebase main
            - Then retry merge

        - action: delete_temp_branch
          command: "git branch -d temp/{spec-id}"
          validation: branch_deleted

        - action: remove_worktree
          command: "git worktree remove .worktrees/{spec-id}"
          validation: worktree_removed

        - action: verify_integration
          command: "git log --oneline -5"
          validation: commits_on_main

      success_criteria:
        - changes_integrated_to_main: true
        - temp_branch_deleted: true
        - worktree_removed: true
        - no_orphaned_references: true

      final_message: |
        ✓ Integration complete
        ✓ Changes merged to main
        ✓ Temp branch temp/{spec-id} deleted
        ✓ Worktree .worktrees/{spec-id} removed
        ✓ Main branch updated with your changes

    # ─────────────────────────────────────────────────────────────
    # FEATURE_BRANCH STRATEGY (EXCEPTION - 20% of work)
    # ─────────────────────────────────────────────────────────────
    condition_feature_branch:
      when: branch_strategy == feature_branch
      philosophy: "Long-running branches remain for PR workflow. Worktree preserved."

      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "Ready to push feature branch for PR? This will: (1) Push feature-{spec-id} to origin, (2) Preserve worktree for continued work. You'll need to create PR manually via GitHub/GitLab."
        confirmation_needed: true

      push_steps:
        - action: verify_worktree_clean
          command: "cd .worktrees/{spec-id} && git status"
          validation: no_uncommitted_changes

        - action: push_feature_branch
          command: "git push -u origin feature-{spec-id}"
          validation: branch_pushed_successfully

        - action: preserve_worktree
          note: Worktree remains at .worktrees/{spec-id} for continued development

      manual_steps:
        - "Create PR via GitHub/GitLab when ready"
        - "Merge PR after code review"
        - "Manual cleanup after PR merged: git worktree remove .worktrees/{spec-id}"

      success_criteria:
        - feature_branch_pushed: true
        - worktree_preserved: true
        - user_notified_of_next_steps: true

      final_message: |
        ✓ Feature branch pushed to origin
        ✓ Branch: feature-{spec-id}
        ✓ Worktree preserved at: .worktrees/{spec-id}
        ✓ Next steps:
          1. Create PR via GitHub/GitLab
          2. Request code review
          3. Merge PR after approval
          4. Manual cleanup: git worktree remove .worktrees/{spec-id}

    validation: integration_complete_per_strategy

# ─────────────────────────────────────────────────────────────────
# RULES
# ─────────────────────────────────────────────────────────────────
rules:
  ALWAYS:
    - follow_workflow_sequence
    - document_all_changes
    - validate_before_completion
    - use_devtools_for_staging_analysis
    - await_user_approval_at_gates
  NEVER:
    - skip_workflow_steps
    - ignore_blockers
    - submit_without_validation
    - skip_browser_testing
    - proceed_without_approval
    - over_engineer_or_expand_scope