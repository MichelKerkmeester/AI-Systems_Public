# ─────────────────────────────────────────────────────────────────
# FRAMEWORK
# ─────────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit for planning and spec with parallel sub-agents
purpose: Spec-driven planning with parallel specialist analyses; preserve manual approval gates
action: Run SpecKit planning with parallel analyst fan-out → mandatory review → synthesis to single consolidated artifacts

operating_mode:
  workflow: sequential_with_parallel_blocks
  workflow_compliance: MANDATORY
  workflow_execution: manual_with_approvals
  approvals: after_each_step
  tracking: progressive_task_checklists
  validation: checkpoint_verification

# ─────────────────────────────────────────────────────────────────
# USER INPUTS
# ─────────────────────────────────────────────────────────────────
user_inputs:
  branch_strategy: "[BRANCH_STRATEGY]"
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ─────────────────────────────────────────────────────────────────
# FIELD HANDLING
# ─────────────────────────────────────────────────────────────────
field_handling:
  branch_strategy:
    required: true
    type: enum
    options:
      - main_temp: "Temporary worktree with short-lived branch (default). Work is isolated in .worktrees/{spec-id} on temp/{spec-id} branch, then merged back to main immediately after validation. Use for: 80% of work - normal features, bug fixes, improvements."
      - feature_branch: "Long-running feature branch in worktree for PR review. Work stays in .worktrees/{spec-id} on feature-{spec-id} branch for team review before integration. Use for: 20% of work - complex features requiring multi-day development and code review."
    default: main_temp
    note: "This decision controls workspace isolation strategy and final integration gates. main_branch option removed (use main_temp for quick integration)."

  spec_id:
    derive_from: "spec_folder path using pattern specs/{NNN} or specs/{NNN-name}"
    fallback: "Extract numeric portion or use timestamp if extraction fails"
    note: "Used to generate feature_branch_name"

  feature_branch_name:
    pattern: "feature-{spec_id}"
    condition: "Only used when branch_strategy == feature_branch"

  defaults:
    branch_strategy_empty: "Default to main_temp (recommended for 80% of work)"
    git_branch_empty: "Derived from worktree setup: temp/{spec-id} for main_temp, feature-{spec-id} for feature_branch"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

  note_on_branch_creation: "Worktree and branch creation handled by git-worktrees skill (see worktree_setup section below)"

# ─────────────────────────────────────────────────────────────────
# WORKTREE SETUP
# ─────────────────────────────────────────────────────────────────
worktree_setup:
  trigger: after_step_1_input_gathering
  invoke: git_worktrees_skill
  description: |
    Create isolated worktree for development using git-worktrees skill.
    Worktree location: .worktrees/{spec-id}
    Branch depends on strategy:
      - main_temp: temp/{spec-id} (short-lived, merges back immediately)
      - feature_branch: feature-{spec-id} (long-running, preserved for PR)

  strategy: branch_strategy  # Derived from user input in step 1

  inputs:
    task_description: derived_from_request_field
    branch_strategy: branch_strategy
    spec_folder: spec_folder  # Used to derive worktree name
    worktree_directory: auto_detect  # Priority: existing → AGENTS.md → ask user

  outputs:
    worktree_path: absolute_path_to_worktree  # e.g., /project/.worktrees/001
    git_branch: active_branch_name  # e.g., temp/001 or feature-001
    baseline_tests: pass_fail_status  # Tests passed at worktree creation

  validation: worktree_ready_and_verified

  note: |
    All subsequent workflow steps execute within this worktree context.
    All sub-agents in parallel stages run within the same worktree.
    Dependencies auto-installed (npm/cargo/pip/go).
    Environment verified clean before proceeding.

# ─────────────────────────────────────────────────────────────────
# SUB-AGENTS (PARALLEL ANALYSTS)
# ─────────────────────────────────────────────────────────────────
sub_agents:
  - id: requirements
    name: Requirements Analyst
    role: Extract requirements, constraints, dependencies, and success metrics from inputs and context
    focus: functional_nonfunctional_constraints_acceptance_criteria
  - id: architecture
    name: Solution Architect
    role: Propose architecture, components, interfaces, and data flows with trade-offs
    focus: system_design_components_interfaces_data_flows
  - id: risk
    name: Risk/Compliance Analyst
    role: Identify risks, edge cases, non-functionals (security, privacy, performance, accessibility)
    focus: security_privacy_performance_edge_cases_compliance
  - id: estimation
    name: Estimation/Scope Analyst
    role: Propose milestones, sequencing, ranges for effort and complexity
    focus: effort_duration_complexity_milestones_sequencing
  - id: reviewer
    name: Lead Reviewer
    role: Reconcile parallel outputs, resolve conflicts, validate completeness
    focus: reconciliation_conflicts_gaps_validation
  - id: synthesizer
    name: Lead Synthesizer
    role: Produce plan.md and planning-summary.md per SpecKit expectations
    focus: artifact_generation_integration_formatting_compliance

# ─────────────────────────────────────────────────────────────────
# WORKFLOW (PARALLEL OUTPUT QA BY MAIN AGENT)
# ─────────────────────────────────────────────────────────────────
workflow:
  step_1_request_analysis:
    input_source: USER_INPUTS_SECTION_ABOVE
    branch_strategy_prompt:
      required: true
      question: |
        Select development isolation strategy:

        Option A: main_temp (⭐ RECOMMENDED - default)
          - Temporary worktree with short-lived branch
          - Work isolated in .worktrees/{NNN} on temp/{NNN} branch
          - Tested in isolation, then merged back to main immediately
          - Branch and worktree deleted after successful integration
          - Use for: 80% of work - normal features, bug fixes, improvements

        Option B: feature_branch
          - Long-running feature branch in worktree for PR review
          - Work isolated in .worktrees/{NNN} on feature-{NNN} branch
          - Branch preserved for team review before integration
          - Worktree remains active for continued development
          - Use for: 20% of work - complex features requiring multi-day development

        This decision is required before proceeding and controls workspace isolation and final integration gates.

        Note: main_branch option removed. Use main_temp for quick integration with isolation benefits.
      options:
        - value: main_temp
          label: "Temporary worktree (main_temp) - Recommended"
        - value: feature_branch
          label: "Feature branch for PR (feature_branch)"
      default: main_temp
    branch_strategy: "[BRANCH_STRATEGY] → REQUIRED; cannot proceed without choice"
    git_branch: "[GIT_BRANCH] → derived from branch_strategy"
    spec_folder: "[SPEC_FOLDER] → auto-create if empty"
    context: "[CONTEXT] → infer if empty"
    issues: "[ISSUES] → discover if empty"
    request: "[REQUEST] → REQUIRED"
    environment: "[STAGING LINK] → skip DevTools if empty"
    scope: "[FILES] → default scope if empty"
    action: |
      1. Prompt user for branch_strategy (default: main_temp)
      2. Analyze user inputs and confirm understanding
      3. Prepare for worktree setup (next step will create isolated workspace)
    outputs:
      - branch_strategy_chosen
      - git_branch_resolved
      - requirement_summary
      - approach_overview
      - complexity_assessment
    validation: understanding_confirmed_and_branch_strategy_set
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements analyzed. Branch strategy: {branch_strategy}. Workspace will be created at .worktrees/{spec-id}. Proceed to workspace setup?"
      confirmation_needed: true

  step_1_5_workspace_setup:
    action: Create isolated worktree via git-worktrees skill
    reference: worktree_setup section above defines complete setup process
    validation: worktree_ready_and_verified
    outputs:
      - worktree_path_resolved
      - git_branch_active
      - baseline_tests_status
    note: "All parallel sub-agents will execute within this worktree context"
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Workspace created at {worktree_path} on branch {git_branch}. Baseline tests: {baseline_tests}. Proceed to pre-work review?"
      confirmation_needed: true

  step_2_pre_work_review:
    required_documents:
      - AGENTS.md
      - .specify/memory/constitution.md
      - knowledge/*.md
    verification: MUST REVIEW
    validation: principles_established

  step_3_specification:
    command: /specify [feature-description]
    outputs:
      - feature_branch: created
      - spec.md: acceptance_criteria
      - location: specs/[NNN-feature]/spec.md
    validation: spec_complete_and_testable

  step_4_clarification:
    command: /clarify
    outputs:
      - resolved_ambiguities
      - clarified_requirements
      - updated_spec
    validation: requirements_clear
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements clarified. Proceed to quality checklist?"
      confirmation_needed: true

  step_5_quality_checklist:
    command: /speckit.checklist
    outputs:
      - quality_checklist: generated
    validation: checklist_generated

# New parallel planning block (fan-out/fan-in) before step_7_planning
  step_6_parallel_planning:
    description: Parallel specialist analyses with bounded concurrency
    analyze_inputs:
      summarize:
        - goals
        - constraints
        - unknowns
      shard_plan:
        - requirements
        - architecture
        - risk
        - estimation
    parallel_work:
      execution: parallel
      concurrency: 3
      shared_context:
        - "[SPEC_FOLDER]/spec.md"
        - "quality_checklist"
        - "request_summary"
        - "context"
      tasks:
        - agent: requirements
          instructions: Produce a requirements dossier with explicit success metrics and dependencies
          expected_output:
            type: markdown
            sections: [objectives, acceptance_criteria_map, dependencies, constraints, success_metrics]
        - agent: architecture
          instructions: Propose a clear architecture with components, interfaces, data flow, and alternatives
          expected_output:
            type: markdown
            sections: [components, interfaces, data_flow, patterns, alternatives, tradeoffs]
        - agent: risk
          instructions: Identify risks, edge cases, and non-functional requirements with severities and mitigations
          expected_output:
            type: markdown
            sections: [risks, severities, mitigations, edge_cases, security_privacy, performance_accessibility]
        - agent: estimation
          instructions: Propose phases, milestones, sequencing, and effort ranges; include assumptions
          expected_output:
            type: markdown
            sections: [phases, milestones, dependencies, sequencing, effort_ranges, assumptions]
    review:
      by: reviewer
      focus:
        - resolve_conflicts
        - validate_completeness
        - ensure_consistency
        - identify_open_questions
      outputs:
        - synthesis_guidance
        - review_notes
    synthesis:
      by: synthesizer
      action: Create plan.md and planning-summary.md from parallel outputs + review guidance
      output_files:
        - "[SPEC_FOLDER]/plan.md"
        - "[SPEC_FOLDER]/planning-summary.md"
      validation_checklist:
        - all_parallel_tasks_present
        - risks_have_mitigations
        - dependencies_acyclic
        - success_metrics_measurable
        - phases_have_owners_and_effort
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of planning artifacts will occur next
      defer_to_step: step_7_planning
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true

  step_7_planning:
    command: /plan [context]
    outputs:
      - plan.md: technical_approach
      - dependencies: identified
      - upstream_docs: reviewed
    validation: approach_defined
    chrome_devtools:
      when: analyzing_current_implementation
      actions:
        - inspect_network_requests
        - analyze_dom_structure
        - review_console_errors
        - capture_performance_metrics
    deep_analysis:
      focus: comprehensive_planning
      approach: deep_analysis
      outputs:
        - detailed_technical_approach
        - implementation_strategy
        - risk_assessment
        - dependency_mapping
    final_output:
      summary_document:
        location: specs/[NNN-feature]/planning-summary.md
        required_sections:
          - feature_overview
          - technical_approach
          - dependencies_identified
          - risks_and_mitigation
          - recommended_next_steps
      completion_message: Planning phase complete. Technical plan and approach have been documented.

  step_8_integration_and_cleanup:
    name: Integration & Cleanup
    description: Integrate planning docs and cleanup based on strategy

    condition_main_temp:
      when: branch_strategy == main_temp
      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "Planning complete. Ready to integrate planning docs to main and cleanup? This will: (1) Merge temp/{spec-id} to main, (2) Delete temp branch, (3) Remove worktree."
        confirmation_needed: true
      integration_steps:
        - verify_worktree_clean
        - return_to_main_repo
        - checkout_main_and_update
        - merge_temp_branch_fast_forward_only
        - delete_temp_branch
        - remove_worktree
      final_message: |
        ✓ Planning docs integrated to main
        ✓ Temp branch deleted
        ✓ Worktree removed

    condition_feature_branch:
      when: branch_strategy == feature_branch
      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "Planning complete. Ready to push feature branch? Worktree will be preserved for implementation phase."
        confirmation_needed: true
      push_steps:
        - verify_worktree_clean
        - push_feature_branch_to_origin
        - preserve_worktree
      final_message: |
        ✓ Feature branch pushed
        ✓ Worktree preserved at .worktrees/{spec-id}
        ✓ Ready for implementation phase

# ─────────────────────────────────────────────────────────────────
# WORKFLOW TERMINATION
# ─────────────────────────────────────────────────────────────────
termination:
  after_step: 8
  message: "Planning phase completed successfully. Workflow terminated after step 8 (integration)."
  next_steps:
    - Review planning documentation
    - Approve technical approach
    - Use full workflow for implementation
    - Or continue with implementation workflow using existing worktree/branch

# ─────────────────────────────────────────────────────────────────
# ADAPTIVE RULES & ERROR HANDLING
# ─────────────────────────────────────────────────────────────────
adaptive_rules:
  high_complexity:
    reviewers: add_security_privacy_reviewer_if_needed
    review_depth: exhaustive
    concurrency: 2
  high_uncertainty:
    insert: discovery_clarification_microstep_before_parallel_work
    estimates: use_ranges
  parallel_not_supported:
    concurrency: 1
    note: "If parallel sub-agents unsupported, run tasks one-by-one; keep review and synthesis."

error_handling:
  retry_policy:
    targeted: true
    max_retries: 2
  fallback:
    on_repeated_failure: rerun_failed_tasks_sequentially
    proceed_with_partial: true
    annotate_in_review: true

# ─────────────────────────────────────────────────────────────────
# RULES
# ─────────────────────────────────────────────────────────────────
rules:
  ALWAYS:
    - follow_workflow_sequence
    - preserve_original_approval_gates
    - document_all_changes
    - validate_before_completion
    - use_devtools_for_staging_analysis
    - evidence_before_decisions
    - enforce_review_before_synthesis
  NEVER:
    - skip_workflow_steps
    - ignore_blockers
    - submit_without_validation
    - skip_browser_testing
    - proceed_without_approval
    - proceed_beyond_planning