# ─────────────────────────────────────────────────────────────────
# FRAMEWORK
# ─────────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit for autonomous implementation with parallel sub-agents
purpose: Spec-driven implementation with parallel preparation (core, integrations, tests, docs), then development with checkpoints
action: Run preparatory parallel block → review → synthesis into implementation_plan.md → proceed autonomously

operating_mode:
  workflow: sequential_with_parallel_blocks
  workflow_compliance: MANDATORY
  workflow_execution: autonomous
  approvals: none
  tracking: progressive_task_checklists
  validation: checkpoint_verification

# ─────────────────────────────────────────────────────────────────
# USER INPUTS
# ─────────────────────────────────────────────────────────────────
user_inputs:
  branch_strategy: "[BRANCH_STRATEGY]"
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ─────────────────────────────────────────────────────────────────
# REQUEST HANDLING
# ─────────────────────────────────────────────────────────────────
request_handling:
  default: "Conduct a comprehensive review of the spec folder and carry out its implementation fully autonomously."
  override: "Use [REQUEST] if provided (replaces default), else use default above"

# ─────────────────────────────────────────────────────────────────
# FIELD HANDLING
# ─────────────────────────────────────────────────────────────────
field_handling:
  branch_strategy:
    required: true
    type: enum
    options:
      - main_temp: "Temporary worktree with short-lived branch (default). Work is isolated in .worktrees/{spec-id} on temp/{spec-id} branch, then merged back to main immediately after validation. Use for: 80% of work - normal features, bug fixes, improvements."
      - feature_branch: "Long-running feature branch in worktree for PR review. Work stays in .worktrees/{spec-id} on feature-{spec-id} branch for team review before integration. Use for: 20% of work - complex features requiring multi-day development and code review."
    default: main_temp
    note: |
      This field should be inherited from the planning workflow (steps 1-7).
      Worktree may already exist from planning phase and will be reused.
      If starting implementation independently, prompt user for choice.
      main_branch option removed (use main_temp for quick integration).

  spec_id:
    derive_from: "spec_folder path using pattern specs/{NNN} or specs/{NNN-name}"
    fallback: "Extract numeric portion or use timestamp if extraction fails"
    note: "Used to generate feature_branch_name"

  feature_branch_name:
    pattern: "feature-{spec_id}"
    condition: "Only used when branch_strategy == feature_branch"

  defaults:
    branch_strategy_empty: "Inherit from planning phase; if unavailable, default to main_temp"
    git_branch_empty: "Derived from worktree: temp/{spec-id} for main_temp, feature-{spec-id} for feature_branch"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

  note_on_branch_creation: "Worktree and branch creation handled by git-worktrees skill. Worktree may already exist from planning phase and will be reused (see worktree_setup section below)."

# ─────────────────────────────────────────────────────────────────
# WORKTREE SETUP
# ─────────────────────────────────────────────────────────────────
worktree_setup:
  trigger: after_step_8_review
  invoke: git_worktrees_skill
  description: |
    Verify or create isolated worktree for implementation using git-worktrees skill.
    Worktree location: .worktrees/{spec-id}
    Branch depends on strategy:
      - main_temp: temp/{spec-id} (short-lived, merges back immediately)
      - feature_branch: feature-{spec-id} (long-running, preserved for PR)

  strategy: branch_strategy  # Inherited from planning phase (steps 1-7)

  inheritance_handling:
    from_planning_phase: true
    worktree_exists_check: required
    actions:
      if_exists: verify_and_reuse
      if_not_exists: create_new

  inputs:
    task_description: derived_from_request_field
    branch_strategy: branch_strategy  # Inherited from planning
    spec_folder: spec_folder
    worktree_directory: auto_detect
    existing_worktree: check_if_present

  outputs:
    worktree_path: absolute_path_to_worktree  # e.g., /project/.worktrees/001
    git_branch: active_branch_name  # e.g., temp/001 or feature-001
    baseline_tests: pass_fail_status
    worktree_reused: true_if_inherited_from_planning

  validation: worktree_ready_and_verified

  note: |
    Implementation phase (steps 8-15) may inherit worktree from planning phase (steps 1-7).
    If worktree exists: verify it's clean and on correct branch, then reuse.
    If worktree doesn't exist: create new isolated workspace.
    All subsequent implementation steps execute within this worktree context.
    All sub-agents in parallel stages run within the same worktree.

# ─────────────────────────────────────────────────────────────────
# SUB-AGENTS (PARALLEL PREP)
# ─────────────────────────────────────────────────────────────────
sub_agents:
  - id: core
    name: Core Implementer
    role: Draft core logic plan, modules, data structures, key algorithms
    focus: business_logic_data_structures_algorithms_core_modules
  - id: adapters
    name: Integrations/Adapters Engineer
    role: Identify external integrations, API surfaces, configuration, error handling
    focus: external_integrations_apis_configuration_error_handling
  - id: tests
    name: Test Engineer
    role: Create test plan (unit/integration), fixtures, coverage targets
    focus: unit_integration_fixtures_coverage_test_strategies
  - id: docs
    name: Docs Engineer
    role: Draft usage notes, examples, migration/upgrade notes
    focus: usage_guides_examples_migration_api_documentation
  - id: reviewer
    name: Integration Reviewer
    role: Validate coherence, API consistency, testability, identify gaps
    focus: coherence_consistency_testability_gap_identification
  - id: synthesizer
    name: Lead Synthesizer
    role: Produce implementation_plan.md to guide development
    focus: implementation_strategy_task_ordering_dependency_mapping

# ─────────────────────────────────────────────────────────────────
# WORKFLOW (PARALLEL OUTPUT QA BY MAIN AGENT)
# ─────────────────────────────────────────────────────────────────
workflow:
  step_8_review_plan_and_spec:
    note: |
      This workflow is a continuation of the planning phase (steps 1-7).
      Branch strategy should have been set during planning.
      Worktree may already exist from planning and will be verified/reused.
      If starting independently, branch_strategy must be provided.
    branch_strategy: "[BRANCH_STRATEGY] → inherited from planning (default: main_temp)"
    git_branch: "[GIT_BRANCH] → derived from worktree"
    action: |
      1. Confirm branch_strategy (should be inherited from planning phase, defaults to main_temp)
      2. Check if worktree exists from planning phase
      3. Review spec and planning artifacts
      4. Prepare for workspace verification (next step will verify/create workspace)
    required_documents:
      - "[SPEC_FOLDER]/spec.md"
      - "[SPEC_FOLDER]/plan.md"
      - "[SPEC_FOLDER]/planning-summary.md"
    outputs:
      - branch_strategy_confirmed
      - worktree_existence_checked
      - planning_artifacts_understood
    validation: planning_artifacts_understood_and_branch_confirmed

  step_8_5_workspace_verification:
    action: Verify or create isolated worktree via git-worktrees skill
    reference: worktree_setup section above defines complete setup process with inheritance handling
    inheritance_check:
      - check_if_worktree_exists_from_planning
      - if_exists_verify_clean_and_reuse
      - if_not_exists_create_new
    validation: worktree_ready_and_verified
    outputs:
      - worktree_path_resolved
      - git_branch_active
      - baseline_tests_status
      - worktree_reused_from_planning
    note: "All parallel sub-agents and implementation steps will execute within this worktree context"

  step_9_task_breakdown:
    command: /tasks
    outputs:
      - tasks/checklist.md
      - task_duration: 15_to_60_minutes
      - tracking_structure: established
    validation: tasks_actionable

  step_10_analysis:
    command: /analyze
    outputs:
      - consistency_report
      - coverage_verification
      - alignment_check
      - gap_analysis
    validation: consistency_verified

  step_11_quality_checklist:
    command: /speckit.checklist
    outputs:
      - quality_checklist: generated
    validation: checklist_generated

  step_12_parallel_implementation_preparation:
    description: Parallel preparation for core, integrations, tests, and docs
    analyze_inputs:
      summarize:
        - key_requirements
        - constraints
        - unknowns
      shard_plan:
        - core
        - adapters
        - tests
        - docs
    parallel_work:
      execution: parallel
      concurrency: 3
      shared_context:
        - "[SPEC_FOLDER]/spec.md"
        - "[SPEC_FOLDER]/plan.md"
        - "tasks/checklist.md"
        - "consistency_report"
      tasks:
        - agent: core
          instructions: Draft module breakdown, key data structures, and algorithmic approach with rationale
          expected_output:
            type: markdown
            sections: [modules, data_structures, algorithms, rationale]
        - agent: adapters
          instructions: Enumerate integration points, API contracts, error-handling, and configuration matrix
          expected_output:
            type: markdown
            sections: [integrations, api_contracts, error_handling, configuration]
        - agent: tests
          instructions: Define test plan with key test cases, fixtures, and coverage goals
          expected_output:
            type: markdown
            sections: [test_plan, key_cases, fixtures, coverage_targets]
        - agent: docs
          instructions: "Draft developer-facing docs: usage patterns, examples, migration notes"
          expected_output:
            type: markdown
            sections: [usage, examples, migration_upgrade]
    review:
      by: reviewer
      focus:
        - coherence_across_tracks
        - api_consistency
        - testability
        - identify_gaps
      outputs:
        - synthesis_guidance
        - review_notes
    synthesis:
      by: synthesizer
      action: Produce implementation_plan.md combining parallel outputs + review guidance
      output_files:
        - "[SPEC_FOLDER]/implementation_plan.md"
      validation_checklist:
        - modules_and_integrations_aligned
        - tests_cover_critical_paths
        - docs_reflect_actual_interfaces
        - risks_and_open_questions_listed
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of "[SPEC_FOLDER]/implementation_plan.md"
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true

  step_13_implementation_check:
    command: /implement [task-id]
    checks:
      prerequisites: verified
      blockers: none
      environment: ready
    chrome_devtools:
      when: validating_environment
      verify:
        - api_endpoints_accessible
        - authentication_working
        - dependencies_loaded
    deep_analysis:
      focus: pre_implementation_verification
      approach: environment_validation
      outputs:
        - environment_status
        - dependency_verification
        - blocker_identification
        - readiness_confirmation

  step_14_development:
    approach: autonomous_implementation_with_checkpoints
    requirements:
      - follow: knowledge/code_standards.md
      - update: task_checklist_progressively
      - test: before_commit
      - no_premature_optimization
    checkpoints:
      major_changes:
        action: log_progress
      issues_found:
        action: document_resolution
      architecture_change:
        action: note_deviation
    chrome_devtools:
      when: debugging_implementation
      actions:
        - test_in_browser
        - verify_network_calls
        - check_console_output
        - validate_dom_changes
        - measure_performance_impact
    deep_analysis:
      focus: iterative_problem_solving
      approach: continuous_validation
      outputs:
        - implementation_decisions
        - debugging_insights
        - optimization_opportunities
        - test_coverage_gaps

  step_15_completion:
    summary_document:
      location: "[SPEC_FOLDER]/implementation-summary.md"
      required_sections:
        - feature_branch_name
        - files_modified_created
        - verification_steps_taken
        - deviations_from_plan
        - knowledge_base_updates
        - recommended_next_steps
        - browser_testing_results
    final_checklist:
      - update_task_status: completed
      - validation_passed: confirmed
      - summary_created: true
      - staging_verified: true
    deep_analysis:
      focus: comprehensive_completion_review
      approach: retrospective_analysis
      outputs:
        - implementation_quality_assessment
        - lessons_learned
        - technical_debt_noted
        - future_improvements

# ─────────────────────────────────────────────────────────────────
# WORKFLOW CONTINUATION
# ─────────────────────────────────────────────────────────────────
prerequisites:
  required_artifacts:
    - "[SPEC_FOLDER]/spec.md"
    - "[SPEC_FOLDER]/plan.md"
    - "[SPEC_FOLDER]/planning-summary.md"
  verification: MUST EXIST BEFORE PROCEEDING
  note: This workflow assumes steps 1-7 completed via speckit_plan_and_spec.yaml
  user_context: "[CONTEXT]"
  user_request: "[REQUEST]"

  step_16_integration_and_cleanup:
    name: Integration & Cleanup
    description: Integrate implementation and cleanup based on strategy

    # ─────────────────────────────────────────────────────────────
    # MAIN_TEMP STRATEGY (DEFAULT - 80% of work)
    # ─────────────────────────────────────────────────────────────
    condition_main_temp:
      when: branch_strategy == main_temp
      philosophy: "Temp branches are immediately merged and deleted. Worktree is ephemeral."

      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "Implementation complete. Ready to integrate to main and cleanup? This will: (1) Merge temp/{spec-id} to main, (2) Delete temp branch, (3) Remove worktree."
        confirmation_needed: true

      integration_steps:
        - action: verify_worktree_clean
          command: "git status"
          validation: no_uncommitted_changes
        - action: return_to_main_repo
          command: "cd ../.."
        - action: checkout_main_and_update
          command: "git checkout main && git pull --ff-only"
          validation: main_up_to_date
        - action: merge_temp_branch
          command: "git merge --ff-only temp/{spec-id}"
          validation: fast_forward_successful
          on_failure: |
            If merge fails: offer to rebase
        - action: delete_temp_branch
          command: "git branch -d temp/{spec-id}"
        - action: remove_worktree
          command: "git worktree remove .worktrees/{spec-id}"
        - action: verify_integration
          command: "git log --oneline -5"

      success_criteria:
        - changes_integrated_to_main: true
        - temp_branch_deleted: true
        - worktree_removed: true

      final_message: |
        ✓ Implementation integrated to main
        ✓ Temp branch deleted
        ✓ Worktree removed
        ✓ Review implementation-summary.md for details

    # ─────────────────────────────────────────────────────────────
    # FEATURE_BRANCH STRATEGY (EXCEPTION - 20% of work)
    # ─────────────────────────────────────────────────────────────
    condition_feature_branch:
      when: branch_strategy == feature_branch
      philosophy: "Long-running branches remain for PR workflow. Worktree preserved."

      approval_gate:
        type: USER_APPROVAL_REQUIRED
        prompt: "Ready to push feature branch for PR? Worktree will be preserved for continued work."
        confirmation_needed: true

      push_steps:
        - action: verify_worktree_clean
          command: "cd .worktrees/{spec-id} && git status"
        - action: push_feature_branch
          command: "git push -u origin feature-{spec-id}"
        - action: preserve_worktree

      manual_steps:
        - "Create PR via GitHub/GitLab when ready"
        - "Merge PR after code review"
        - "Manual cleanup: git worktree remove .worktrees/{spec-id}"

      success_criteria:
        - feature_branch_pushed: true
        - worktree_preserved: true

      final_message: |
        ✓ Feature branch pushed
        ✓ Branch: feature-{spec-id}
        ✓ Worktree preserved at .worktrees/{spec-id}
        ✓ Ready for PR creation and code review
        ✓ Review implementation-summary.md for details

    validation: integration_complete_per_strategy

termination:
  after_step: 16
  message: "Implementation phase completed successfully. Workflow terminated after step 16 (integration and cleanup)."

# ─────────────────────────────────────────────────────────────────
# ADAPTIVE RULES & ERROR HANDLING
# ─────────────────────────────────────────────────────────────────
adaptive_rules:
  high_complexity:
    review_depth: exhaustive
    concurrency: 2
  high_uncertainty:
    insert: discovery_microstep_prior_to_parallel
  parallel_not_supported:
    concurrency: 1
    note: "If parallel sub-agents unsupported, run tasks one-by-one; keep review and synthesis."

error_handling:
  retry_policy:
    targeted: true
    max_retries: 2
  fallback:
    on_repeated_failure: rerun_failed_tasks_sequentially
    proceed_with_partial: true
    annotate_in_review: true

# ─────────────────────────────────────────────────────────────────
# RULES
# ─────────────────────────────────────────────────────────────────
rules:
  ALWAYS:
  - follow_workflow_sequence
  - document_all_changes
  - validate_before_completion
  - use_devtools_for_staging_analysis
  - update_task_checklist_progressively
  - self_validate_and_proceed
  - enforce_review_before_synthesis
  - apply_minimum_needed_change
  NEVER:
  - skip_workflow_steps
  - ignore_blockers
  - submit_without_validation
  - skip_browser_testing