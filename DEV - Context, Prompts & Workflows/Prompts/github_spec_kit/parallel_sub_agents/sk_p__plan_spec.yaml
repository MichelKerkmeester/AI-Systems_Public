# ─────────────────────────────────────────────────────────────────
# FRAMEWORK
# ─────────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit for planning and spec with parallel sub-agents
purpose: Spec-driven planning with parallel specialist analyses; preserve manual approval gates
action: Run SpecKit planning with parallel analyst fan-out → mandatory review → synthesis to single consolidated artifacts

operating_mode:
  workflow: sequential_with_parallel_blocks
  workflow_compliance: MANDATORY
  workflow_execution: manual_with_approvals
  approvals: after_each_step
  tracking: progressive_task_checklists
  validation: checkpoint_verification

# ─────────────────────────────────────────────────────────────────
# USER INPUTS
# ─────────────────────────────────────────────────────────────────
user_inputs:
  branch_strategy: "[BRANCH_STRATEGY]"
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ─────────────────────────────────────────────────────────────────
# FIELD HANDLING
# ─────────────────────────────────────────────────────────────────
field_handling:
  branch_strategy:
    required: true
    type: enum
    options:
      - feature_branch: "Create new feature branch (auto-create feature-{NNN} aligned with spec folder)"
      - main_branch: "Work on main branch (skip branch creation and commit directly to main)"
    note: "This decision is required at Step 1 and controls branch creation during planning"

  spec_id:
    derive_from: "spec_folder path using pattern specs/{NNN} or specs/{NNN-name}"
    fallback: "Extract numeric portion or use timestamp if extraction fails"
    note: "Used to generate feature_branch_name"

  feature_branch_name:
    pattern: "feature-{spec_id}"
    condition: "Only used when branch_strategy == feature_branch"

  defaults:
    branch_strategy_empty: "Prompt user at Step 1; cannot proceed without choice"
    git_branch_empty: "If branch_strategy == feature_branch: use feature_branch_name; else: main"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

  branch_creation:
    condition: "Only execute when branch_strategy == feature_branch"
    steps:
      - "Check if feature branch already exists"
      - "Create feature-{spec_id} if not exists"
      - "Checkout feature branch"
    skip_when: "branch_strategy == main_branch"

# ─────────────────────────────────────────────────────────────────
# SUB-AGENTS (PARALLEL ANALYSTS)
# ─────────────────────────────────────────────────────────────────
sub_agents:
  - id: requirements
    name: Requirements Analyst
    role: Extract requirements, constraints, dependencies, and success metrics from inputs and context
    focus: functional_nonfunctional_constraints_acceptance_criteria
  - id: architecture
    name: Solution Architect
    role: Propose architecture, components, interfaces, and data flows with trade-offs
    focus: system_design_components_interfaces_data_flows
  - id: risk
    name: Risk/Compliance Analyst
    role: Identify risks, edge cases, non-functionals (security, privacy, performance, accessibility)
    focus: security_privacy_performance_edge_cases_compliance
  - id: estimation
    name: Estimation/Scope Analyst
    role: Propose milestones, sequencing, ranges for effort and complexity
    focus: effort_duration_complexity_milestones_sequencing
  - id: reviewer
    name: Lead Reviewer
    role: Reconcile parallel outputs, resolve conflicts, validate completeness
    focus: reconciliation_conflicts_gaps_validation
  - id: synthesizer
    name: Lead Synthesizer
    role: Produce plan.md and planning-summary.md per SpecKit expectations
    focus: artifact_generation_integration_formatting_compliance

# ─────────────────────────────────────────────────────────────────
# WORKFLOW (PARALLEL OUTPUT QA BY MAIN AGENT)
# ─────────────────────────────────────────────────────────────────
workflow:
  step_1_request_analysis:
    input_source: USER_INPUTS_SECTION_ABOVE
    branch_strategy_prompt:
      required: true
      question: |
        Branch Strategy: Choose how you want to work with Git for this spec.
        
        Option A: Create new feature branch
          - We will auto-create feature-{NNN} aligned with the spec folder
          - Allows isolated development and testing
          - Can be integrated to main later via complete workflow
        
        Option B: Work on main branch
          - Skip branch creation and commit directly to main
          - Faster for small changes or hotfixes
          - No separate integration needed
        
        This decision is required before proceeding and will be inherited by implementation workflow.
      options:
        - value: feature_branch
          label: "Create new feature branch (feature-{NNN})"
        - value: main_branch
          label: "Work on main branch (no branching)"
    branch_strategy: "[BRANCH_STRATEGY] → REQUIRED; cannot proceed without choice"
    git_branch: "[GIT_BRANCH] → derived from branch_strategy"
    spec_folder: "[SPEC_FOLDER] → auto-create if empty"
    context: "[CONTEXT] → infer if empty"
    issues: "[ISSUES] → discover if empty"
    request: "[REQUEST] → REQUIRED"
    environment: "[STAGING LINK] → skip DevTools if empty"
    scope: "[FILES] → default scope if empty"
    action: |
      1. Prompt user for branch_strategy (required)
      2. Derive git_branch based on choice:
         - If feature_branch: extract spec_id from spec_folder, create feature-{spec_id}
         - If main_branch: use 'main'
      3. Analyze user inputs and confirm understanding
    outputs:
      - branch_strategy_chosen
      - git_branch_resolved
      - requirement_summary
      - approach_overview
      - complexity_assessment
    validation: understanding_confirmed_and_branch_strategy_set
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements analyzed. Branch strategy: {branch_strategy} on {git_branch}. Proceed to pre-work review?"
      confirmation_needed: true

  step_2_pre_work_review:
    required_documents:
      - AGENTS.md
      - .specify/memory/constitution.md
      - knowledge/*.md
    verification: MUST REVIEW
    validation: principles_established

  step_3_specification:
    command: /specify [feature-description]
    outputs:
      - feature_branch: created
      - spec.md: acceptance_criteria
      - location: specs/[NNN-feature]/spec.md
    validation: spec_complete_and_testable

  step_4_clarification:
    command: /clarify
    outputs:
      - resolved_ambiguities
      - clarified_requirements
      - updated_spec
    validation: requirements_clear
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements clarified. Proceed to quality checklist?"
      confirmation_needed: true

  step_5_quality_checklist:
    command: /speckit.checklist
    outputs:
      - quality_checklist: generated
    validation: checklist_generated

# New parallel planning block (fan-out/fan-in) before step_7_planning
  step_6_parallel_planning:
    description: Parallel specialist analyses with bounded concurrency
    analyze_inputs:
      summarize:
        - goals
        - constraints
        - unknowns
      shard_plan:
        - requirements
        - architecture
        - risk
        - estimation
    parallel_work:
      execution: parallel
      concurrency: 3
      shared_context:
        - "[SPEC_FOLDER]/spec.md"
        - "quality_checklist"
        - "request_summary"
        - "context"
      tasks:
        - agent: requirements
          instructions: Produce a requirements dossier with explicit success metrics and dependencies
          expected_output:
            type: markdown
            sections: [objectives, acceptance_criteria_map, dependencies, constraints, success_metrics]
        - agent: architecture
          instructions: Propose a clear architecture with components, interfaces, data flow, and alternatives
          expected_output:
            type: markdown
            sections: [components, interfaces, data_flow, patterns, alternatives, tradeoffs]
        - agent: risk
          instructions: Identify risks, edge cases, and non-functional requirements with severities and mitigations
          expected_output:
            type: markdown
            sections: [risks, severities, mitigations, edge_cases, security_privacy, performance_accessibility]
        - agent: estimation
          instructions: Propose phases, milestones, sequencing, and effort ranges; include assumptions
          expected_output:
            type: markdown
            sections: [phases, milestones, dependencies, sequencing, effort_ranges, assumptions]
    review:
      by: reviewer
      focus:
        - resolve_conflicts
        - validate_completeness
        - ensure_consistency
        - identify_open_questions
      outputs:
        - synthesis_guidance
        - review_notes
    synthesis:
      by: synthesizer
      action: Create plan.md and planning-summary.md from parallel outputs + review guidance
      output_files:
        - "[SPEC_FOLDER]/plan.md"
        - "[SPEC_FOLDER]/planning-summary.md"
      validation_checklist:
        - all_parallel_tasks_present
        - risks_have_mitigations
        - dependencies_acyclic
        - success_metrics_measurable
        - phases_have_owners_and_effort
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of planning artifacts will occur next
      defer_to_step: step_7_planning
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true

  step_7_planning:
    command: /plan [context]
    outputs:
      - plan.md: technical_approach
      - dependencies: identified
      - upstream_docs: reviewed
    validation: approach_defined
    chrome_devtools:
      when: analyzing_current_implementation
      actions:
        - inspect_network_requests
        - analyze_dom_structure
        - review_console_errors
        - capture_performance_metrics
    deep_analysis:
      focus: comprehensive_planning
      approach: deep_analysis
      outputs:
        - detailed_technical_approach
        - implementation_strategy
        - risk_assessment
        - dependency_mapping
    final_output:
      summary_document:
        location: specs/[NNN-feature]/planning-summary.md
        required_sections:
          - feature_overview
          - technical_approach
          - dependencies_identified
          - risks_and_mitigation
          - recommended_next_steps
      completion_message: Planning phase complete. The workflow has been executed through step 4. Technical plan and approach have been documented. To proceed with implementation, use the full workflow_automated.yaml.

# ─────────────────────────────────────────────────────────────────
# WORKFLOW TERMINATION
# ─────────────────────────────────────────────────────────────────
termination:
  after_step: 7
  message: "Planning phase completed successfully. Workflow terminated after step 7 as requested."
  branch_integration_note: |
    Branch strategy has been set and will be inherited by subsequent workflows.
    If branch_strategy == feature_branch:
      - Feature branch created for planning artifacts
      - Implementation workflow will use this branch
      - Complete workflow will offer integration to main at the end
    If branch_strategy == main_branch:
      - Planning artifacts committed directly to main
      - Implementation workflow will continue on main
      - No integration step needed
  next_steps:
    - Review planning documentation
    - Approve technical approach
    - Branch strategy: {branch_strategy} on {git_branch}
    - Use workflow_automated.yaml for full implementation (will inherit branch strategy)
    - Or use workflow.yaml for manual implementation with gates

# ─────────────────────────────────────────────────────────────────
# ADAPTIVE RULES & ERROR HANDLING
# ─────────────────────────────────────────────────────────────────
adaptive_rules:
  high_complexity:
    reviewers: add_security_privacy_reviewer_if_needed
    review_depth: exhaustive
    concurrency: 2
  high_uncertainty:
    insert: discovery_clarification_microstep_before_parallel_work
    estimates: use_ranges
  parallel_not_supported:
    concurrency: 1
    note: "If parallel sub-agents unsupported, run tasks one-by-one; keep review and synthesis."

error_handling:
  retry_policy:
    targeted: true
    max_retries: 2
  fallback:
    on_repeated_failure: rerun_failed_tasks_sequentially
    proceed_with_partial: true
    annotate_in_review: true

# ─────────────────────────────────────────────────────────────────
# RULES
# ─────────────────────────────────────────────────────────────────
rules:
  ALWAYS:
    - follow_workflow_sequence
    - preserve_original_approval_gates
    - document_all_changes
    - validate_before_completion
    - use_devtools_for_staging_analysis
    - evidence_before_decisions
    - enforce_review_before_synthesis
  NEVER:
    - skip_workflow_steps
    - ignore_blockers
    - submit_without_validation
    - skip_browser_testing
    - proceed_without_approval
    - proceed_beyond_planning