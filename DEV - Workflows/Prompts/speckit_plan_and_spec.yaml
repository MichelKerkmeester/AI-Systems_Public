# ───────────────────────────────────────────────────────────────
# FRAMEWORK
# ───────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit for planning and spec
purpose: Spec-driven planning with compliance through step 4
action: Run SpecKit from spec to planning with validation

operating_mode:
  execution: manual_with_approvals
  approvals: after_each_step
  workflow: sequential
  workflow_compliance: MANDATORY
  tracking: progressive_task_checklists
  validation: checkpoint_verification

rules:
  ALWAYS:
  - follow_workflow_sequence
  - document_all_changes
  - validate_before_completion
  - use_devtools_for_staging_analysis
  - await_user_approval_at_gates
  - evidence_before_decisions
  NEVER:
  - skip_workflow_steps
  - ignore_blockers
  - submit_without_validation
  - skip_browser_testing
  - proceed_without_approval
  - proceed_beyond_planning

# ───────────────────────────────────────────────────────────────
# USER INPUTS
# ───────────────────────────────────────────────────────────────
user_inputs:
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ───────────────────────────────────────────────────────────────
# FIELD HANDLING
# ───────────────────────────────────────────────────────────────
field_handling:
  defaults:
    git_branch_empty: "Auto-create feature-{NNN} from highest +001"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

# ───────────────────────────────────────────────────────────────
# WORKFLOW - PLANNING PHASE ONLY
# ───────────────────────────────────────────────────────────────
workflow:
  step_0_request_analysis:
    input_source: USER_INPUTS_SECTION_ABOVE
    git_branch: "[GIT_BRANCH] → auto-create if empty"
    spec_folder: "[SPEC_FOLDER] → auto-create if empty"
    context: "[CONTEXT] → infer if empty"
    issues: "[ISSUES] → discover if empty"
    request: "[REQUEST] → REQUIRED"
    environment: "[STAGING LINK] → skip DevTools if empty"
    scope: "[FILES] → default scope if empty"
    action: Analyze user inputs and confirm understanding
    outputs:
    - requirement_summary
    - approach_overview
    - complexity_assessment
    validation: understanding_confirmed
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements analyzed. Proceed to pre-work review?"
      confirmation_needed: true

  step_1_pre_work_review:
    required_documents:
    - AGENTS.md
    - .specify/memory/constitution.md
    - knowledge/*.md
    verification: MUST REVIEW
    validation: principles_established

  step_2_specification:
    command: /specify [feature-description]
    outputs:
    - feature_branch: created
    - spec.md: acceptance_criteria
    - location: specs/[NNN-feature]/spec.md
    validation: spec_complete_and_testable
    chrome_devtools:
      when: analyzing_existing_features
      approach: Navigate → Snapshot → Analyze → Document

  step_3_clarification:
    command: /clarify
    outputs:
    - resolved_ambiguities
    - clarified_requirements
    - updated_spec
    validation: requirements_clear
    chrome_devtools:
      when: "[STAGING LINK] provided"
      approach: Navigate → Inspect → Analyze → Clarify
      capture: current_behavior_screenshots
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements clarified. Proceed to quality checklist?"
      confirmation_needed: true

  step_4_quality_checklist:
    command: /speckit.checklist
    outputs:
    - quality_checklist: generated
    validation: checklist_generated

  step_5_planning:
    command: /plan [context]
    outputs:
    - plan.md: technical_approach
    - dependencies: identified
    - upstream_docs: reviewed
    validation: approach_defined
    chrome_devtools:
      when: analyzing_current_implementation
      actions:
      - inspect_network_requests
      - analyze_dom_structure
      - review_console_errors
      - capture_performance_metrics
    deep_analysis:
      focus: comprehensive_planning
      approach: deep_analysis
      outputs:
      - detailed_technical_approach
      - implementation_strategy
      - risk_assessment
      - dependency_mapping
    final_output:
      summary_document:
        location: specs/[NNN-feature]/planning-summary.md
        required_sections:
        - feature_overview
        - technical_approach
        - dependencies_identified
        - risks_and_mitigation
        - recommended_next_steps
      completion_message: Planning phase complete. The workflow has been executed through step 4. Technical plan and approach have been documented. To proceed with implementation, use the full workflow_automated.yaml.

post_completion:
  branch_integration_offer:
    note: "This merges documentation changes only and does not begin implementation."
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "All checks passed. Would you like me to push this branch to main now to keep main up to date and minimize conflicts?"
      confirmation_needed: true
    integration_policy:
      merge_strategy: rebase_then_fast_forward
      safety_checks:
        - clean working tree
        - validations/tests/pass checks are green (as applicable for the workflow)
        - no unresolved blockers
      conflict_policy:
        on_rebase_conflict: pause and ask for guidance
        fallback_to_pr: offer to open a PR if user prefers manual resolution
      steps:
        - fetch origin
        - update main (pull --ff-only)
        - rebase feature branch onto main
        - fast-forward merge into main
        - push origin main
        - after successful integration, offer to delete the feature branch locally and on origin (explicit confirmation required)
      tagging: optional; only on user request

# ───────────────────────────────────────────────────────────────
# WORKFLOW TERMINATION
# ───────────────────────────────────────────────────────────────
termination:
  after_step: 5
  message: "Planning phase completed successfully. Workflow terminated after step 5 as requested."
  next_steps:
  - Review planning documentation
  - Approve technical approach
  - Use workflow_automated.yaml for full implementation
  - Or use workflow.yaml for manual implementation with gates
