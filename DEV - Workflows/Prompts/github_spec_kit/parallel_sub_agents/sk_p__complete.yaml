# ─────────────────────────────────────────────────────────────────
# FRAMEWORK
# ─────────────────────────────────────────────────────────────────
role: Expert Developer using GitHub SpecKit with manual gates and parallel sub-agents
purpose: Full spec-to-implementation flow with parallel blocks per stage and preserved approval gates
action: 
  - Stage A (planning/spec) parallel → review → synthesis → approval; 
  - Stage B (implementation prep) parallel → review → synthesis → approval; 
  - Stage C (quality) parallel → review → synthesis → final approval

operating_mode:
  workflow: sequential_with_parallel_blocks
  workflow_compliance: MANDATORY
  workflow_execution: manual_with_approvals
  approvals: after_each_step
  tracking: progressive_task_checklists
  validation: checkpoint_verification

# ─────────────────────────────────────────────────────────────────
# USER INPUTS
# ─────────────────────────────────────────────────────────────────
user_inputs:
  git_branch: "[GIT_BRANCH]"
  spec_folder: "[SPEC_FOLDER]"
  context: "[CONTEXT]"
  issues: "[ISSUES]"
  request: "[REQUEST]"
  environment: "[STAGING LINK]"
  scope: "[FILES]"

# ─────────────────────────────────────────────────────────────────
# FIELD HANDLING
# ─────────────────────────────────────────────────────────────────
field_handling:
  defaults:
    git_branch_empty: "Auto-create feature-{NNN} from highest +001"
    spec_folder_empty: "Auto-create specs/{NNN} from highest +001"
    context_empty: "Infer from [REQUEST] and [STAGING LINK]"
    issues_empty: "Investigate during workflow"
    environment_empty: "Skip browser testing steps"
    scope_empty: "Use scope_policy.default"

  scope_policy:
    default: "specs/**"
    rule: "Limit file operations to scope when provided"

# ─────────────────────────────────────────────────────────────────
# SUB-AGENTS BY STAGE
# ─────────────────────────────────────────────────────────────────
sub_agents:
  stage_A_planning_spec:
    - { id: requirements, name: Requirements Analyst, role: requirements_and_success_metrics }
    - { id: architecture, name: Solution Architect, role: components_interfaces_data_flow }
    - { id: risk, name: Risk/Compliance Analyst, role: risks_edge_cases_non_functionals }
    - { id: estimation, name: Estimation/Scope Analyst, role: milestones_sequencing_effort_ranges }
    - { id: reviewerA, name: Lead Reviewer (A), role: reconcile_and_validate }
    - { id: synthesizerA, name: Lead Synthesizer (A), role: plan_and_summary }
  stage_B_implementation_prep:
    - { id: core, name: Core Implementer, role: modules_data_structures_algorithms }
    - { id: adapters, name: Integrations/Adapters Engineer, role: integrations_api_config }
    - { id: tests, name: Test Engineer, role: plan_cases_fixtures_coverage }
    - { id: docs, name: Docs Engineer, role: usage_examples_migration }
    - { id: reviewerB, name: Integration Reviewer (B), role: coherence_api_testability }
    - { id: synthesizerB, name: Lead Synthesizer (B), role: implementation_plan }
  stage_C_quality_review:
    - { id: completeness, name: Completeness Reviewer, role: coverage_non_functionals }
    - { id: feasibility, name: Feasibility Reviewer, role: technical_viability_perf_scale }
    - { id: security, name: Security/Privacy Reviewer, role: threats_data_compliance }
    - { id: consistency, name: Consistency/Traceability Reviewer, role: contradictions_terminology_refs }
    - { id: reviewerC, name: Lead Reviewer (C), role: severity_resolution }
    - { id: synthesizerC, name: Lead Synthesizer (C), role: quality_report }

# ─────────────────────────────────────────────────────────────────
# WORKFLOW (PARALLEL OUTPUT QA BY MAIN AGENT)
# ─────────────────────────────────────────────────────────────────
workflow:
  step_1_request_analysis:
    input_source: USER_INPUTS_SECTION_ABOVE
    git_branch: "[GIT_BRANCH] → auto-create if empty"
    spec_folder: "[SPEC_FOLDER] → auto-create if empty"
    context: "[CONTEXT] → infer if empty"
    issues: "[ISSUES] → discover if empty"
    request: "[REQUEST] → REQUIRED"
    environment: "[STAGING LINK] → skip DevTools if empty"
    scope: "[FILES] → default scope if empty"
    action: Analyze user inputs and confirm understanding
    outputs:
      - requirement_summary
      - approach_overview
      - complexity_assessment
    validation: understanding_confirmed
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements analyzed. Proceed to pre-work review?"
      confirmation_needed: true

  step_2_pre_work_review:
    required_documents:
      - AGENTS.md
      - .specify/memory/constitution.md
      - knowledge/*.md
    verification: MUST REVIEW
    validation: principles_established
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Pre-work documentation reviewed. Proceed to specification?"
      confirmation_needed: true

  step_3_specification:
    command: /specify [feature-description]
    outputs:
      - feature_branch: created
      - spec.md: acceptance_criteria
      - location: specs/[NNN-feature]/spec.md
    validation: spec_complete
    chrome_devtools:
      when: analyzing_existing_features
      approach: Navigate → Snapshot → Analyze → Document
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Specification created. Review spec.md and approve to proceed to clarification?"
      confirmation_needed: true

  step_4_clarification:
    command: /clarify
    outputs:
      - resolved_ambiguities
      - clarified_requirements
      - updated_spec
    validation: requirements_clear
    chrome_devtools:
      when: staging_url_provided
      approach: Navigate → Inspect → Analyze → Clarify
      capture: current_behavior_screenshots
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Requirements clarified. Proceed to quality checklist?"
      confirmation_needed: true

  step_5_quality_checklist:
    command: /speckit.checklist
    outputs:
      - quality_checklist: generated
    validation: checklist_generated
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Quality checklist complete. Proceed to planning parallel block?"
      confirmation_needed: true

  # Stage A: Planning/Spec parallel block
  step_6_parallel_planning:
    description: Parallel specialist analyses for planning/spec
    parallel_work:
      execution: parallel
      concurrency: 3
      tasks:
        - { agent: requirements, instructions: "Requirements dossier with success metrics and dependencies" }
        - { agent: architecture, instructions: "Architecture with components, interfaces, data flow, alternatives" }
        - { agent: risk, instructions: "Risks, severities, mitigations, edge cases, non-functionals" }
        - { agent: estimation, instructions: "Phases, milestones, sequencing, effort ranges, assumptions" }
    review:
      by: reviewerA
      outputs: [synthesis_guidance, review_notes]
    synthesis:
      by: synthesizerA
      output_files:
        - "[SPEC_FOLDER]/plan.md"
        - "[SPEC_FOLDER]/planning-summary.md"
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of planning artifacts
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Planning artifacts synthesized. Approve to proceed to task breakdown?"
      confirmation_needed: true

  step_7_task_breakdown:
    command: /tasks
    outputs:
      - tasks/checklist.md
      - task_duration: 15_to_60_minutes
      - tracking_structure: established
    validation: tasks_actionable
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Tasks broken down. Review checklist.md and approve to proceed to analysis?"
      confirmation_needed: true

  step_8_analysis:
    command: /analyze
    outputs:
      - consistency_report
      - coverage_verification
      - alignment_check
      - gap_analysis
    validation: consistency_verified
    chrome_devtools:
      when: comparing_staging_vs_spec
      approach: Navigate → Snapshot → Compare → Report
      focus:
        - ui_consistency
        - functionality_gaps
        - performance_baseline
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Analysis complete. Review consistency report and approve to proceed to implementation parallel prep?"
      confirmation_needed: true

  # Stage B: Implementation preparation parallel block
  step_9_parallel_implementation_prep:
    description: Parallel prep for core, integrations, tests, docs
    parallel_work:
      execution: parallel
      concurrency: 3
      tasks:
        - { agent: core, instructions: "Modules, data structures, algorithmic approach" }
        - { agent: adapters, instructions: "Integrations, API contracts, configuration, error handling" }
        - { agent: tests, instructions: "Test plan, key cases, fixtures, coverage targets" }
        - { agent: docs, instructions: "Usage docs, examples, migration" }
    review:
      by: reviewerB
      outputs: [synthesis_guidance, review_notes]
    synthesis:
      by: synthesizerB
      output_files:
        - "[SPEC_FOLDER]/implementation_plan.md"
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of implementation plan
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Implementation plan synthesized. Approve to proceed to implementation check?"
      confirmation_needed: true

  step_10_implementation_check:
    command: /implement [task-id]
    checks:
      prerequisites: verified
      blockers: none
      environment: ready
    critical_gate: CONFIRM_BEFORE_CODE
    chrome_devtools:
      when: validating_environment
      verify:
        - api_endpoints_accessible
        - authentication_working
        - dependencies_loaded
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Implementation prerequisites verified. APPROVE TO BEGIN CODE IMPLEMENTATION?"
      confirmation_needed: true
      warning: "This will begin actual code changes"

  step_11_development:
    approach: manual_implementation_with_checkpoints
    requirements:
      - follow: knowledge/code_standards.md
      - update: task_checklist_progressively
      - test: before_commit
    checkpoints:
      major_changes:
        action: log_progress
        approval: USER_APPROVAL_REQUIRED
      issues_found:
        action: document_resolution
        approval: USER_APPROVAL_REQUIRED
      architecture_change:
        action: note_deviation
        approval: USER_APPROVAL_REQUIRED
    chrome_devtools:
      when: debugging_implementation
      actions:
        - test_in_browser
        - verify_network_calls
        - check_console_output
        - validate_dom_changes
        - measure_performance_impact
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Development complete. Proceed to quality parallel review before completion?"
      confirmation_needed: true

  # Stage C: Quality/Review parallel block
  step_12_parallel_quality_review:
    description: Parallel reviewers for final quality validation
    parallel_work:
      execution: parallel
      concurrency: 3
      tasks:
        - { agent: completeness, instructions: "Coverage and non-functionals validation" }
        - { agent: feasibility, instructions: "Technical viability, performance, scalability" }
        - { agent: security, instructions: "Security/privacy assessment and mitigations" }
        - { agent: consistency, instructions: "Contradictions, terminology, references" }
    review:
      by: reviewerC
      outputs: [synthesis_guidance, prioritized_issue_list]
    synthesis:
      by: synthesizerC
      output_files:
        - "[SPEC_FOLDER]/quality_report.md"
    main_agent_finalization:
      by: MAIN_AGENT
      action: QA review and finalization of quality report
      checks:
        - confirm_alignment_with_request_and_context
        - validate_completeness_and_consistency
        - ensure_output_format_and_sections_present
        - resolve_remaining_open_questions_or_note_them
      outputs:
        - main_agent_review_notes
        - final_signoff: true
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Quality review complete. Approve to proceed to completion summary?"
      confirmation_needed: true

  step_13_completion:
    summary_document:
      location: specs/[NNN-feature]/implementation-summary.md
      required_sections:
        - feature_branch_name
        - files_modified_created
        - verification_steps_taken
        - deviations_from_plan
        - knowledge_base_updates
        - recommended_next_steps
        - browser_testing_results
    final_checklist:
      - update_task_status: completed
      - validation_passed: confirmed
      - summary_created: true
      - staging_verified: true
    final_approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "Implementation summary complete. Approve to finalize workflow?"
      confirmation_needed: true

  step_14_branch_integration:
    name: Branch Integration Approval
    approval_gate:
      type: USER_APPROVAL_REQUIRED
      prompt: "All checks passed. Would you like me to push this branch to main now to keep main up to date and minimize conflicts?"
      confirmation_needed: true
    integration_policy:
      merge_strategy: rebase_then_fast_forward
      safety_checks:
        - clean working tree
        - validations/tests/pass checks are green (as applicable for the workflow)
        - no unresolved blockers
      conflict_policy:
        on_rebase_conflict: pause and ask for guidance
        fallback_to_pr: offer to open a PR if user prefers manual resolution
      steps:
        - fetch origin
        - update main (pull --ff-only)
        - rebase feature branch onto main
        - fast-forward merge into main
        - push origin main
        - after successful integration, offer to delete the feature branch locally and on origin (explicit confirmation required)
      tagging: optional; only on user request

# ─────────────────────────────────────────────────────────────────
# ADAPTIVE RULES & ERROR HANDLING
# ─────────────────────────────────────────────────────────────────
adaptive_rules:
  high_complexity:
    concurrency: 2
    review_depth: exhaustive
  high_uncertainty:
    insert: discovery_microstep_before_parallel_blocks
    estimates: use_ranges
  parallel_not_supported:
    concurrency: 1
    note: "If parallel sub-agents unsupported, run tasks one-by-one; keep review and synthesis."

error_handling:
  retry_policy:
    targeted: true
    max_retries: 2
  fallback:
    on_repeated_failure: rerun_failed_tasks_sequentially
    proceed_with_partial: true
    annotate_in_review: true

# ─────────────────────────────────────────────────────────────────
# RULES
# ─────────────────────────────────────────────────────────────────
rules:
  ALWAYS:
    - follow_workflow_sequence
    - preserve_original_approval_gates
    - document_all_changes
    - validate_before_completion
    - use_devtools_for_staging_analysis
    - evidence_before_decisions
    - enforce_review_before_synthesis
  NEVER:
    - skip_workflow_steps
    - ignore_blockers
    - submit_without_validation
    - skip_browser_testing
    - proceed_without_approval
    - over_engineer_or_expand_scope